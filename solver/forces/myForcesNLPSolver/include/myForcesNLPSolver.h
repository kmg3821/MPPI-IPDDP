/*
myForcesNLPSolver : A fast customized optimization solver.

Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v5.1.0 on Thursday, June 23, 2022 at 4:33:33 AM */
#ifndef myForcesNLPSolver_H
#define myForcesNLPSolver_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double myForcesNLPSolver_float;
typedef double myForcesNLPSolver_ldl_s_float;
typedef double myForcesNLPSolver_ldl_r_float;
typedef double myForcesNLPSolver_callback_float;

typedef double myForcesNLPSolverinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_myForcesNLPSolver
#define MISRA_C_myForcesNLPSolver (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_myForcesNLPSolver
#define RESTRICT_CODE_myForcesNLPSolver (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_myForcesNLPSolver
#define SET_PRINTLEVEL_myForcesNLPSolver    (0)
#endif

/* timing */
#ifndef SET_TIMING_myForcesNLPSolver
#define SET_TIMING_myForcesNLPSolver    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_myForcesNLPSolver			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_myForcesNLPSolver		(myForcesNLPSolver_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_myForcesNLPSolver	(200) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_myForcesNLPSolver			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_myForcesNLPSolver		(myForcesNLPSolver_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_myForcesNLPSolver		(myForcesNLPSolver_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_myForcesNLPSolver	(myForcesNLPSolver_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_myForcesNLPSolver	(myForcesNLPSolver_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_myForcesNLPSolver      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_myForcesNLPSolver (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_myForcesNLPSolver   (2)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_myForcesNLPSolver  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_myForcesNLPSolver   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_myForcesNLPSolver  (-6)

/* no progress in method possible */
#define NOPROGRESS_myForcesNLPSolver   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_myForcesNLPSolver   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_myForcesNLPSolver   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_myForcesNLPSolver   (-12)

/* thread error */
#define THREAD_FAILURE_myForcesNLPSolver  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_myForcesNLPSolver  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_myForcesNLPSolver  (-100)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)





/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 100 */
    myForcesNLPSolver_float lb[100];

    /* vector of size 100 */
    myForcesNLPSolver_float ub[100];

    /* vector of size 3 */
    myForcesNLPSolver_float xinit[3];

    /* vector of size 3 */
    myForcesNLPSolver_float xfinal[3];

    /* vector of size 253 */
    myForcesNLPSolver_float x0[253];

    /* vector of size 204 */
    myForcesNLPSolver_float all_parameters[204];


} myForcesNLPSolver_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 100 */
    myForcesNLPSolver_float MVopt[100];

    /* vector of size 153 */
    myForcesNLPSolver_float Xopt[153];

    /* vector of size 253 */
    myForcesNLPSolver_float z[253];


} myForcesNLPSolver_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    myForcesNLPSolver_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    myForcesNLPSolver_float res_ineq;

	/* norm of stationarity condition */
    myForcesNLPSolver_float rsnorm;

	/* max of all complementarity violations */
    myForcesNLPSolver_float rcompnorm;

    /* primal objective */
    myForcesNLPSolver_float pobj;	
	
    /* dual objective */
    myForcesNLPSolver_float dobj;	

    /* duality gap := pobj - dobj */
    myForcesNLPSolver_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    myForcesNLPSolver_float rdgap;		

    /* duality measure */
    myForcesNLPSolver_float mu;

	/* duality measure (after affine step) */
    myForcesNLPSolver_float mu_aff;
	
    /* centering parameter */
    myForcesNLPSolver_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    myForcesNLPSolver_float step_aff;
    
    /* step size (combined direction) */
    myForcesNLPSolver_float step_cc;    

	/* solvertime */
	myForcesNLPSolver_float solvetime;   

	/* time spent in function evaluations */
	myForcesNLPSolver_float fevalstime;  


} myForcesNLPSolver_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Thursday, June 23, 2022 4:33:37 AM */
/* User License expires on: (UTC) Saturday, December 17, 2022 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Saturday, December 17, 2022 10:00:00 PM (approx.) */
/* Solver Generation Request Id: c249168c-9f18-4525-9927-4dfd95450d3a */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*myForcesNLPSolver_extfunc)(myForcesNLPSolver_float* x, myForcesNLPSolver_float* y, myForcesNLPSolver_float* lambda, myForcesNLPSolver_float* params, myForcesNLPSolver_float* pobj, myForcesNLPSolver_float* g, myForcesNLPSolver_float* c, myForcesNLPSolver_float* Jeq, myForcesNLPSolver_float* h, myForcesNLPSolver_float* Jineq, myForcesNLPSolver_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default myForcesNLPSolver_solve(myForcesNLPSolver_params *params, myForcesNLPSolver_output *output, myForcesNLPSolver_info *info, FILE *fs, myForcesNLPSolver_extfunc evalextfunctions_myForcesNLPSolver);	













#ifdef __cplusplus
}
#endif

#endif
